//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.27 at 05:05:16 PM CEST 
//


package de.mpc.pia.modeller.execute.xmlparams;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the de.mpc.pia.modeller.execute.xmlparams package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _PARAMETERS_QNAME = new QName("", "PARAMETERS");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: de.mpc.pia.modeller.execute.xmlparams
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link RelocatorType }
     * 
     */
    public RelocatorType createRelocatorType() {
        return new RelocatorType();
    }

    /**
     * Create an instance of {@link CliElementType }
     * 
     */
    public CliElementType createCliElementType() {
        return new CliElementType();
    }

    /**
     * Create an instance of {@link LISTITEMType }
     * 
     */
    public LISTITEMType createLISTITEMType() {
        return new LISTITEMType();
    }

    /**
     * Create an instance of {@link CTDTool }
     * 
     */
    public CTDTool createTool() {
        return new CTDTool();
    }

    /**
     * Create an instance of {@link LogMessageType }
     * 
     */
    public LogMessageType createLogMessageType() {
        return new LogMessageType();
    }

    /**
     * Create an instance of {@link RelocatorCollectionType }
     * 
     */
    public RelocatorCollectionType createRelocatorCollectionType() {
        return new RelocatorCollectionType();
    }

    /**
     * Create an instance of {@link MappingType }
     * 
     */
    public MappingType createMappingType() {
        return new MappingType();
    }

    /**
     * Create an instance of {@link PARAMETERSType }
     * 
     */
    public PARAMETERSType createPARAMETERSType() {
        return new PARAMETERSType();
    }

    /**
     * Create an instance of {@link CliType }
     * 
     */
    public CliType createCliType() {
        return new CliType();
    }

    /**
     * Create an instance of {@link ITEMLISTType }
     * 
     */
    public ITEMLISTType createITEMLISTType() {
        return new ITEMLISTType();
    }

    /**
     * Create an instance of {@link ITEMType }
     * 
     */
    public ITEMType createITEMType() {
        return new ITEMType();
    }

    /**
     * Create an instance of {@link LogCollectionType }
     * 
     */
    public LogCollectionType createLogCollectionType() {
        return new LogCollectionType();
    }

    /**
     * Create an instance of {@link LogType }
     * 
     */
    public LogType createLogType() {
        return new LogType();
    }

    /**
     * Create an instance of {@link NODEType }
     * 
     */
    public NODEType createNODEType() {
        return new NODEType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PARAMETERSType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "PARAMETERS")
    public JAXBElement<PARAMETERSType> createPARAMETERS(PARAMETERSType value) {
        return new JAXBElement<>(_PARAMETERS_QNAME, PARAMETERSType.class, null, value);
    }

}
